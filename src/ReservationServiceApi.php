<?php

namespace Reddot\TegetaReservation;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

use function PHPUnit\Framework\isNull;

class ReservationServiceApi
{
    private string $baseUrl;
    private string $url; // generated by setUrl

    public function __construct()
    {
        $this->baseUrl = $this->url = config('tegeta-reservation.url');
    }

    /**
     * რეზერვაციის ჯგუფების მიხედვით ფილიალების და სერვისებზე ინფორმაციის მიღება
     *
     * url: /api/reservation_information/
     *
     * parameters:
     *      code - რეზერვაციის ჯგუფის კოდი
     *      vehicle_type  - light(მსუბუქი), truck(სატვირთო), van(მიკროავტობუსი)
     */
    public function reservationInformation(?string $code = null, ?string $vehicleType = null): ?array
    {
        if (!$code) {
            $code = config('tegeta-reservation.code');
        }

        return $this->sendPostRequest('/api/reservation_information', [
            'code' => $code,
        ]);
    }

    /**
     * რეზერვაციის დროების ინფორმაციის მიღება ფილიალის, სერვისისა და თარიღის მიხედვით
     *
     * url: /api/reservation_information_filtered
     *
     * parameters:
     *      branch - ფილიალის სახელი
     *      service_type - სერვისის დასახელება
     *      date - თარიღი (yyyy-mm-dd)
     */
    public function reservationInformationFiltered(string $branch, string $serviceType, string $date): ?array
    {
        return $this->sendPostRequest('/api/reservation_information_filtered', [
            'branch' => $branch,
            'service_type' => $serviceType,
            'date' => $date,
        ]);
    }

    /**
     * რეზერვაციის ჩანაწერის გაკეთება
     *
     * url: /api/reserve
     *
     * parameters:
     *      state_number - სახელმწიფო ნომერი
     *      vehicle_type - ავტომობილის ტიპი [light(მსუბუქი), truck(სატვირთო), van(მიკროავტობუსი)]
     *      user_type - მომხმარებლის ტიპი (ფიზიკური პირი, კომპანია)
     *      ID number - პირადი ნომერი
     *      Company ID - კომპანიის საიდენტიფიკაციო კოდი
     *      branch - ფილიალის სახელი
     *      service_type - სერვისის დასახელება
     *      date - რეზერვაციის თარიღი [ფორმატი: yyyy-mm-dd] (მაგ: 2017-07-18)
     *      time - რეზერვაციის დრო [ფორმატი: hh:mm] (მაგ: 12:30)
     *      phone - ტელეფონის ნომერი
     *
     * return:
     *      {result : 0} - ჩანაწერის წარმატებით შენახვა
     *      {result : 1} - მონაცემები არასწორ ფორმატშია წარმოდგენილი
     *      {result : 2} - მოცემული მანქანის ნომრით ამ დროს უკვე რეზერვირებულია
     *      {result : 3} - რეზერვაცია შეუძლებელია (არასწორი დრო ან მოცემულ დროს რეზერვაციისთვის განკუთვნილი ბოქსების და რეზერვაციის ჩანაწერების რაოდენობები ტოლია)
     */
    public function reserve(string $stateNumber, string $vehicleType, string $userType, ?string $IDNumber, ?string $companyID, string $branch, string $serviceType, string $date, string $time, ?string $phone): ?array
    {
        assert(in_array($userType, ['person', 'company']));
        assert(in_array($vehicleType, ['light', 'truck', 'van']));

        $data = [
            'state_number' => $stateNumber,
            'vehicle_type' => $vehicleType,
            'branch' => $branch,
            'service_type' => $serviceType,
            'date' => $date,
            'time' => $time,
            'phone' => $phone,
        ];

        if ($vehicleType != 'light') {
            $data['user_type'] = $userType;
            if ($userType == 'company') {
                $data['company_id'] = $companyID;
            }
        }

        return $this->sendPostRequest('/api/reserve', $data);
    }

    /**
     * რეზერვაციის ინფორმაციის მიღება ფილიალის, სერვისის, წელის და თვის მიხედვით
     *
     * url: /api/reservation_information_month
     *
     * parameters:
     *      branch - ფილიალის სახელი
     *      service_type - სერვისის დასახელება
     *      year - წელი (yyyy)
     *      month - თვე (mm)
     */
    public function reservationInformationMonth(string $branch, string $serviceType, string $year, string $month): ?array
    {
        return $this->sendPostRequest('/api/reservation_information_month', [
            'branch' => $branch,
            'service_type' => $serviceType,
            'year' => $year,
            'month' => $month,
        ]);
    }

    /**
     * რეზერვაციის ინფორმაციის მიღება რეზერვაციის ID-ს მიხედვით
     *
     * url: /api/reserved_information
     *
     * parameters:
     *      reservation_ids - მაგ. [ 1234 ] ან [ 1234, 5678 ]
     *
     * return
     *      - {result : 0} წარმატებით დაბრუნდა ინფორმაცია
     *      - {result : 1} ვერ მოიძებნა რეზერვაცისს ID
     */
    public function reservedInformation(array $reservationIDs): ?array
    {
        // ToDo
        return null;
    }

    /**
     * რეზერვაციის გაუქმება რეზერვაციის ID-ს მიხედვით
     *
     * url: api/reserved_remove
     *
     * parameters:
     *      reservation_id - მაგ.: 1234
     *
     * return
     *      - {result : 0} წარმატებით გაუქმდა რეზერვაცია
     *      - {result : 1} ვერ მოიძებნა რეზერვაცისს ID
     */
    public function reservedRemove(string $reservationID): ?array
    {
        // ToDo
        return null;
    }

    // sets request url
    private function sendPostRequest(string $path, array $data = []): ?array
    {
        $this->url = $this->baseUrl . $path;
        $this->url = preg_replace('/([^:])(\/{2,})/', '$1/', $this->url);

        $request = Http::asForm()->post($this->url, $data);

        $log = [
            'URL' => $this->url,
            'METHOD' => 'POST',
            'REQUEST_BODY' => $data,
            'RESPONSE' => $request->getStatusCode(),
        ];

        try {
            Log::info(json_encode($log, JSON_UNESCAPED_UNICODE));
            Log::info(json_encode($request->json(), JSON_UNESCAPED_UNICODE));

            return $request->json();
        } catch (\Throwable $th) {
            return null;
        }
    }
}
